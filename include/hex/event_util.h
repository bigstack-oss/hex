// HEX SDK

#ifndef HEX_EVENT_UTIL_H
#define HEX_EVENT_UTIL_H

#include <string.h>
#include <sys/types.h>
#include <time.h>

#ifdef __cplusplus

#include <map>
#include <string>

/**
 * A helper library to process the events/messages generated by HexLogEvent.
 */

/**
 * HexLogEvent() logs a message to the system log in a specific format.
 * hex_syslogd (system syslog module) scraps non-debug log messages and checks
 * if the log message matches the format used by HexLogEvent and
 * if so an event is generated.
 *
 * HexLogEvent interface generates messages in the following format:
 * eventid:: |arg0=val1,arg1=val2,...|
 * characters , and = in val1, val2 etc... are escaped using \ character
 *
 * This utility function takes  the message string and returns true if the
 * message string matches the HexLogEvent format. In addition eventid,
 * msg and args are parsed and returned in the out params.
 *
 * @param message: IN, syslog message
 * @param eventid : OUT, parsed eventid
 * @param args : OUT, parsed args (portion of the message bn | and |)
 *
 * @return : returns true if message matches HexLogEvent interface, false
 *           otherwise
 */
bool HexParseEvent(const std::string &message, std::string &eventid, std::string &args);

/**
 * utility function that takes a comma separate name=val argument list and converts
 * into a name => val map. During the process "val" are unescaped.
 *
 * @param args: IN, comma separated name=val list
 * @param argMap: out param, converted name => val map
 *
 * @return : returns true if there are no errors during conversion, else returns
 *           false
 */
bool HexParseEventArgs(const std::string &args, std::map<std::string, std::string> &argMap);

/**
 * Format a unix epoch timestamp in a consistent format suitable for use with
 * the HEX_EVENT_TIME attribute.
 */
static inline void
TimeToAttr(const time_t* t, std::string& s)
{
    char buf[64];
    memset(buf, 0, 64);

    tzset();
    struct tm ltm;
    localtime_r(t, &ltm);
    strftime(buf, 64, "%FT%T%z", &ltm);
    s = buf;
}

#endif /* __cplusplus */

#ifdef __cplusplus
extern "C" {
#endif


/**
 * This function takes a unique event id, message arugments and locale
 * to looks up the locale specific message text. Returns the message
 * text encoded as per the specified encoding
 *
 * @param eventid : message id to lookup in the catalog
 * @param args : a comma separated argname=argval list (message text params)
 * @param locale : locale for which the lookup is requested
 *
 * @return: on success returns the locale specific encoded string for
 *          the event id, on failure returns NULL pointer. The storage for
 *          the encoded string is dynamically allcated and must be freed by the
 *          caller using free()
 */
char* HexLookupEventText(const char *eventid, const char *args, const char *locale);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* endif HEX_EVENT_UTIL_H */

