#!/bin/bash

set -e

PROG=$(basename $0)
HEX_SCRIPTSDIR=$(dirname $0)
if [ -f $HEX_SCRIPTSDIR/functions ] ; then
    . $HEX_SCRIPTSDIR/functions
else
    echo "$PROG: functions not found" >&2
    exit 1
fi

Usage() {
    echo "Usage: $PROG <commitsince_commituntil>"
    echo "   eg: $PROG v2.4.0-rc1_e8c5f9e"
    exit 1
}

HOTFIXDIR=$(pwd)/$1
ROOTFS=$TOP_BLDDIR/core/main/rootfs
NEW_ROOTFS=$HOTFIXDIR/rootfs
INPUT=$(pwd)/${1}.in
OUTPUT=$(pwd)/${1}.out
HEX_SINCE=${1%_*}
SINCE_TIME="$(cd $TOP_SRCDIR && git show -s --format=%ci $HEX_SINCE)"
HEX_UNTIL=${1#*_}
if [ "$HEX_UNTIL" = $(date "+%Y%m%d") ] ; then
    HEX_UNTIL=
    UNTIL_TIME="$(date)"
else
    UNTIL_TIME="$(cd $TOP_SRCDIR && git show -s --format=%ci $HEX_UNTIL)"
fi

if [ -d $SRCDIR/$1 ] ; then
    cp -rf $SRCDIR/$1 ./
fi
mkdir -p $NEW_ROOTFS
rm -f $INPUT $OUTPUT
touch $OUTPUT

(cd $TOP_SRCDIR && git -P diff $HEX_SINCE $HEX_UNTIL --name-only) >$INPUT
if [ ! -e $HOTFIXDIR/commit.txt ] ; then
    (cd $TOP_SRCDIR && git -P log --decorate --since="$SINCE_TIME" --until="$UNTIL_TIME") >$HOTFIXDIR/commit.txt
    if grep -q "^hex$" $INPUT ; then
        (cd $TOP_SRCDIR/hex && git -P log --decorate --since="$SINCE_TIME" --until="$UNTIL_TIME") >>$HOTFIXDIR/commit.txt
    fi
fi
if grep -q "^hex$" $INPUT ; then
    HEX_SINCE=$(cd $TOP_SRCDIR/hex && git -P log --since="$SINCE_TIME" --until="$UNTIL_TIME" --pretty=format:"%h" | tail -1)
    HEX_UNTIL=$(cd $TOP_SRCDIR/hex && git -P log --since="$SINCE_TIME" --until="$UNTIL_TIME" --pretty=format:"%h" | head -1)

    if [ "$HEX_SINCE" = "$HEX_UNTIL" ] ; then
        (cd $TOP_SRCDIR/hex && git -P show $HEX_SINCE --name-status --oneline | grep "^M.*" | awk '{print $2}' | xargs -i echo hex/{}) >>$INPUT
    else
        (cd $TOP_SRCDIR/hex && git -P diff $HEX_SINCE $HEX_UNTIL --name-only | xargs -i echo hex/{}) >> $INPUT
    fi
fi

CNT=0
while read L ; do
    ((CNT=CNT+1))
    printf "%0.s-" {1..80} | tee -a $OUTPUT
    printf "\nFILE %04i: %s\n" $CNT $L | tee -a $OUTPUT
    INTERESTED=yes
    PATTERN=
    FINDFLG=
    case $L in
        core/tests/*|core/main/tests/*)
            INTERESTED=no
            ;;
        hex/data/*)
            FINDPTH="etc"
            PATTERN=$(basename ${L%.sh*})
            ;;
        *)
            INTERESTED=no
            ;;
    esac

    if [ "$INTERESTED" = "yes" ] ; then
        if [[ -n "$PATTERN" && -n "$FINDPTH" ]] ; then
            pushd ${ROOTFS}
            if [ -e $HOTFIXDIR/backup.lst ] ; then
                grep ".*$PATTERN" $HOTFIXDIR/backup.lst | xargs -i rsync -aRI --out-format="RECOMMAND: %f" {} $NEW_ROOTFS/ | tee -a $OUTPUT
            else
                find $FINDPTH $FINDFLG -regex ".*$PATTERN" -exec rsync -aRI --out-format="RECOMMAND: %f" {} $NEW_ROOTFS/ \ ; | tee -a $OUTPUT
            fi
            popd
        fi
        echo
        if echo "$L" | grep -q "^hex/" ; then
            (cd $TOP_SRCDIR/hex && git -P diff $HEX_SINCE HEAD ${L#hex/}) || true
        else
            (cd $TOP_SRCDIR && git -P diff $HEX_SINCE HEAD $L) || true
        fi
    fi

done <$INPUT

pushd ${ROOTFS}
if [ -e $HOTFIXDIR/backup.lst ] ; then
    cat $HOTFIXDIR/backup.lst | xargs -i rsync -aRI --out-format="HAND-PICKED: %f" {} $NEW_ROOTFS/ | tee -a $OUTPUT
else
    (cd $NEW_ROOTFS && find ./ -type f | sed 's|^./||') | sort > $HOTFIXDIR/backup.lst
    for DIR in opt usr ; do
	echo "RECOMMAND: $DIR"
	rsync -aRI $DIR $NEW_ROOTFS/
	echo $DIR >> $HOTFIXDIR/backup.lst
    done
fi
popd

[ -e $HOTFIXDIR/README ] || cat <<EOF > $HOTFIXDIR/README
Files that can reside in this directory:

fixpack.info [required]
    Manifest file with fix pack name and description

post_install.sh [optional]
post_rollback.sh [optional]
pre_install.sh [optional]
pre_rollback.sh [optional]
    Scripts to run pre/post install and rollback

backup.lst [optional]
    List of files to backup before installing fix pack, and restore on rollback

remove.lst [optional]
    List of files to remove before installing fix pack
    NOTE: These files should also be included in 'backup.lst'

rootfs.cgz [optional]
    Gzipped-cpio archive of files to install

norollback [optional]
    Marker file that indicates that this fix pack cannot be uninstalled

Fix pack can also include arbitrary files that are explicitly referenced by
the pre_install.sh/post_install.sh scripts, but these files will not be available
during rollback.
EOF

[ -e $HOTFIXDIR/pre_install.sh ] || cat <<EOF > $HOTFIXDIR/pre_install.sh
#!/bin/sh

FIXPACK_SRCDIR="\$1"

exit 0
EOF

[ -e $HOTFIXDIR/post_install.sh ] || cat <<EOF > $HOTFIXDIR/post_install.sh
#!/bin/sh

FIXPACK_SRCDIR="\$1"

# Uncomment to request reboot after installing the fix pack:
#
#   touch /var/fixpack/need_reboot

exit 0
EOF

[ -e $HOTFIXDIR/pre_rollback.sh ] || cat <<EOF > $HOTFIXDIR/pre_rollback.sh
#!/bin/sh

FIXPACK_SRCDIR="\$1"

# Uncomment to request reboot after installing the fix pack:
#
#   touch /var/fixpack/need_reboot

exit 0
EOF

[ -e $HOTFIXDIR/post_rollback.sh ] || cat <<EOF > $HOTFIXDIR/post_rollback.sh
#!/bin/sh

FIXPACK_SRCDIR="\$1"

# Uncomment to request reboot after installing the fix pack:
#
#   touch /var/fixpack/need_reboot

exit 0

EOF

# Assuming COMMITSINCE tag label is like "v2.2.0"
[ -e $HOTFIXDIR/fixpack.info ] || cat <<EOF > $HOTFIXDIR/fixpack.info
FIXPACK_ID="$1"
FIXPACK_NAME="$1"
FIXPACK_DESCRIPTION="Hotfix commit since ${1%_*} until ${1#*_}"
SUPPORTED_FIRMWARES="${1:1:5}"
EOF

[ -e $HOTFIXDIR/remove.lst ] || touch $HOTFIXDIR/remove.lst
