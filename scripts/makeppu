#!/bin/bash
# HEX SDK

set -e

PROG=$(basename $0)
HEX_SCRIPTSDIR=$(dirname $0)
if [ -f $HEX_SCRIPTSDIR/functions ] ; then
    . $HEX_SCRIPTSDIR/functions 
else
    echo "$PROG: functions not found" >&2
    exit 1
fi

Usage() {
    echo "Usage: $PROG [ <options> ] <bzImage> <initrd> <rootfs.tgz> <firmware.efi> <pkg-file>"
    echo "  -p <padding>    Padding size in kilobytes. Can also specify G (Gig) or M (Meg) suffix. (defaults to 1M)"
    echo "  -c <cmd>        Command to be run to install additional files to pkg file. \"@ROOTDIR@\" will be substituted with root directory"
    echo "  -C <cmd>        Command to be run to install additional files to pkg file's rootfs. \"@ROOTDIR@\" will be substituted with root directory"
    echo "  -k <pdinst>     Diagnostics kernel image"
    echo "  -f <pdfilesy>   Diagnostics kernel initramfs image"
    echo "  <bzImage>       Kernel image"
    echo "  <initrd>        initramfs image"
    echo "  <rootfs.tgz>    Root filesystem"
    echo "  <firmware.efi>  Firmware (UEFI x64)"
    echo "  <pkg-file>      Output pkg file"
    exit 1
}

PADDING=1M
INSTALL_CMD=
ROOTFS_INSTALL_CMD=

while getopts "p:c:C:s:b:k:f:" OPT ; do
    case $OPT in
	p) PADDING="$OPTARG" ;;
	c) INSTALL_CMD="$OPTARG" ;;
	C) ROOTFS_INSTALL_CMD="$OPTARG" ;;
	k) DIAG_KERN="$OPTARG" ;;
	f) DIAG_RD="$OPTARG" ;;
	*) Usage ;;
    esac
done
shift $(($OPTIND - 1))

[ $# -eq 5 ] || Usage
KERNEL=$1
INITRD=$2
ROOTFS=$3
FIRMWARE=$4
PKGFILE=$5

[ -f /proc/mounts ] || Error "proc filesystem not mounted in build environment!"

LOOPDEV=

Cleanup()
{
    UnmountRemoveLoop $LOOPDEV
    RemoveTempFiles
}
trap Cleanup INT TERM EXIT

TEMPDIR=$(MakeTempDir)

ROOTFSMD5FILE=$(dirname $PKGFILE)/$(basename $PKGFILE .pkg)_rootfs.md5

# All sizes are in kilobytes
KERNEL_SIZE=$(( ( $(GetFileSize $KERNEL) + 1023 ) / 1024 ))

# Size of the gzipped file, not the size of the initramfs filesystem
INITRD_SIZE=$(( ( $(GetFileSize $INITRD) + 1023 ) / 1024 ))

# Size of the gzipped file, not the size of the root filesystem
ROOTFS_SIZE=$(( ( $(GetFileSize $ROOTFS) + 1023 ) / 1024 ))

# Size of firmware (UEFI x64)
FIRMWARE_SIZE=$(( ( $(GetFileSize $FIRMWARE) + 1023 ) / 1024 ))

PKGFILE_SIZE=$(( $KERNEL_SIZE + $INITRD_SIZE + $ROOTFS_SIZE + $FIRMWARE_SIZE + $(ConvertImageSize $PADDING) ))

TEMPPKGFILE=$(MakeTemp)
CreateFsImage ext4 $PKGFILE_SIZE $TEMPPKGFILE
mv $TEMPPKGFILE $PKGFILE

# $PKGFILE structure
# |
# |-bzImage
# |-grubx64.efi
# |-initramfs.cgz
# |-initramfs.cgz.size
# |-rootfs.cgz

(
    trap 'eval UnmountRemoveLoop $LOOPDEV' INT TERM EXIT
    #LOOPDEV=$(SetupLoop -o 2048 $PKGFILE)
    LOOPDEV=$(SetupLoop $PKGFILE)
    mount -t ext4 $LOOPDEV $TEMPDIR

    cp $KERNEL $TEMPDIR/bzImage
    cp $INITRD $TEMPDIR/initramfs.cgz
    # Save size for use by hex_install
    cp $INITRD.size $TEMPDIR/initramfs.cgz.size
    cp $FIRMWARE $TEMPDIR/

    if [ -n "$ROOTFS_INSTALL_CMD" ] ; then
        ROOTDIR=$(MakeTempDir)
        chmod 755 $ROOTDIR
        ExtractCgz $ROOTFS $ROOTDIR

        # Perform extra install actions into pkg file's rootfs
        eval `echo $ROOTFS_INSTALL_CMD | sed -e "s,@ROOTDIR@,$ROOTDIR,g"`

        # Remove list of installed packages and files
        rm -f $ROOTDIR/*.tsv $ROOTDIR/*_rpms.txt

        # Generate m5sum's for all files in rootfs for use by fix pack build process
        # FIXME: This is going to be time consuming. do it only if production build or specified
        # GenRootMd5 $ROOTDIR > $ROOTFSMD5FILE

        CreateCgz $TEMPDIR/rootfs.cgz $ROOTDIR
    else
        cp $ROOTFS $TEMPDIR/rootfs.cgz && sync
	[ "$(sha256sum $ROOTFS | cut -d ' ' -f 1)" = "$(sha256sum $TEMPDIR/rootfs.cgz | cut -d ' ' -f 1)" ]
    fi

    # Perform extra install actions into pkg file
    [ -z "$INSTALL_CMD" ] || eval `echo $INSTALL_CMD | sed -e "s,@ROOTDIR@,$TEMPDIR,g"`
    rmdir $TEMPDIR/lost+found
    UnmountRemoveLoop $LOOPDEV
)

# $SPKGFILE structure (first tier folder under / (except for /usr) that is larger than 1GB)
# |
# |-rootfs_0.cgz
# |-rootfs_1.cgz

PKGCNT=0
for ROOTFS_SPLIT in ${ROOTFS%.cgz}_*.cgz ; do
    SPKGFILE=$(dirname $PKGFILE)/$(basename $PKGFILE .pkg)_${PKGCNT}.pkg
    ROOTFS_SPLIT_SIZE=$(( ( $(GetFileSize $ROOTFS_SPLIT) + 1023 ) / 1024 ))

    if [ $PKGCNT -eq 0 ] ; then
        KERNEL_SIZE=$(( ( $(GetFileSize $KERNEL) + 1023 ) / 1024 ))
        INITRD_SIZE=$(( ( $(GetFileSize $INITRD) + 1023 ) / 1024 ))
        FIRMWARE_SIZE=$(( ( $(GetFileSize $FIRMWARE) + 1023 ) / 1024 ))

        SPKGFILE_SIZE=$(( $KERNEL_SIZE + $INITRD_SIZE + $FIRMWARE_SIZE + $ROOTFS_SPLIT_SIZE + $(ConvertImageSize $PADDING) ))
    else
	SPKGFILE_SIZE=$(( $ROOTFS_SPLIT_SIZE + $(ConvertImageSize $PADDING) ))
    fi

    TEMPSPKGFILE=$(MakeTemp)
    CreateFsImage ext4 $SPKGFILE_SIZE $TEMPSPKGFILE
    mv $TEMPSPKGFILE $SPKGFILE
    (
	trap 'eval UnmountRemoveLoop $LOOPDEV' INT TERM EXIT
	LOOPDEV=$(SetupLoop $SPKGFILE)
	mount -t ext4 $LOOPDEV $TEMPDIR

	if [ $PKGCNT -eq 0 ] ; then
	    cp $KERNEL $TEMPDIR/bzImage
	    cp $INITRD $TEMPDIR/initramfs.cgz
	    # Save size for use by hex_install
	    cp $INITRD.size $TEMPDIR/initramfs.cgz.size
	    cp $FIRMWARE $TEMPDIR/

	    if [ -n "$ROOTFS_INSTALL_CMD" ] ; then
		ROOTDIR=$(MakeTempDir)
		chmod 755 $ROOTDIR
		ExtractCgz $ROOTFS $ROOTDIR

		# Perform extra install actions into pkg file's rootfs
		eval `echo $ROOTFS_INSTALL_CMD | sed -e "s,@ROOTDIR@,$ROOTDIR,g"`

		# Remove list of installed packages and files
		rm -f $ROOTDIR/*.tsv $ROOTDIR/*_rpms.txt

		# Generate m5sum's for all files in rootfs for use by fix pack build process
		# FIXME: This is going to be time consuming. do it only if production build or specified
		# GenRootMd5 $ROOTDIR > $ROOTFSMD5FILE

		CreateCgz $TEMPDIR/rootfs.cgz $ROOTDIR
	    else
		cp $ROOTFS_SPLIT $TEMPDIR/rootfs.cgz && sync
		[ "$(sha256sum $ROOTFS_SPLIT | cut -d ' ' -f 1)" = "$(sha256sum $TEMPDIR/rootfs.cgz | cut -d ' ' -f 1)" ]
	    fi

	    # Perform extra install actions into pkg file
	    [ -z "$INSTALL_CMD" ] || eval `echo $INSTALL_CMD | sed -e "s,@ROOTDIR@,$TEMPDIR,g"`
	else
	    cp $ROOTFS_SPLIT $TEMPDIR/rootfs.cgz && sync
	    [ "$(sha256sum $ROOTFS_SPLIT | cut -d ' ' -f 1)" = "$(sha256sum $TEMPDIR/rootfs.cgz | cut -d ' ' -f 1)" ]
	fi
	rmdir $TEMPDIR/lost+found
	UnmountRemoveLoop $LOOPDEV
    )
    (( PKGCNT+=1 ))
done

exit 0
